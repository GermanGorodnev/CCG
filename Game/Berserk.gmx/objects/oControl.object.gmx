<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Main data
window_set_caption("HALFALIVE: DIVINE CHALLENGE " + string(GM_version));
randomize();

cursor_sprite = sCursor;

global.guiW = 1280;
global.guiH = 720;

global.language = "English";
global.sound = 0;

global.wins = 0;
global.loses = 0;

global.maxCards = 30;

global.client = -1;
global.server = -1; // server we're connected to
global.connectip = "127.0.0.1";
global.serverip = 0;
global.haveserver = false; 
global.serverType = network_socket_tcp;

// Nickname
global.name = "Player";
global.opName = "None"; // Name
global.opWins = 0;
global.opLoses = 0;

// Deck
global.deckNumb = 0;
global.decks = ds_list_create();
global.decksCount = 0;
global.deck = 0;

// Boosters
global.packs3 = 10;
global.packs5 = 10;

// MONEY
global.money = 10000000;

// ALL CARDS IN OUR COLLECTION
global.collection = ds_list_create();

// GAME CONTROL VARIABLES
global.gameState = GAME_STATES.CARD_PREPARE;
global.cardsOnBoard = 20; // for each player
global.turnDuration = 60;

// SELLOUT
global.sellout = false;
global.selloutStr = "";
global.newSelloutStr = "";

//////////////////////////////// LOAD /////////////////////////////
loadGame();
loadSellout();

req = http_get("http://stickmangames.net16.net/index.php?sellout=1");

// Particles
global.packOpenPs = part_system_create();
part_system_depth(global.packOpenPs, -100);
global.randomMLG = part_type_create();
part_type_shape(global.randomMLG, pt_shape_circle);
part_type_sprite(global.randomMLG, sMLG, false, false, true);
part_type_speed(global.randomMLG, 3, 14, 0.1, 0.5);
//part_type_gravity(global.randomMLG, 1, 270);
part_type_alpha2(global.randomMLG, 1, 0.1);
part_type_life(global.randomMLG, room_speed / 4, room_speed / 2);
part_type_size(global.randomMLG, 1, 2, 0, 0);
part_type_direction(global.randomMLG, 0, 360, 0, 20);
part_type_orientation(global.randomMLG, 0, 360, 15, 20, false);

global.coin = part_type_create();
part_type_shape(global.coin, pt_shape_circle);
part_type_sprite(global.coin, sCoin, true, false, false);
part_type_speed(global.coin, 3, 7, 0.3, 0);
//part_type_gravity(global.coin, 0.5, 270);
part_type_alpha2(global.coin, 1, 0.1);
part_type_life(global.coin, room_speed, room_speed * 2);
part_type_size(global.coin, 1, 2, 0, 0);
part_type_direction(global.coin, 260, 280, 0, 3);
part_type_orientation(global.coin, 0, 360, 15, 20, false);

if (ds_list_empty(global.decks))
{
    var d = ds_list_create();
    ds_list_add(global.decks, d);
    global.decksCount++;
    global.deck = d;
}

room_goto_next();
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear
part_system_destroy(global.packOpenPs);
part_type_destroy(global.randomMLG);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Create server
global.serverName = oNamebox.text;
global.server = instance_create(0, 0, oServer);
if (!global.haveserver)
    show_debug_message("Cannot create server");
else
{
    global.connectip = "127.0.0.1"
    
    room_goto(rLobby);
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Connect to server
global.serverName = oNamebox.text;
global.connectip = global.serverip;

room_goto(rLobby);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="62">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Getting response
if (ds_map_find_value(async_load, "id") == req)
{
    if (ds_map_find_value(async_load, "status") == 0)
    {
        //now parsing
        var js = async_load[? "result"];
        global.newSelloutStr = string_copy(js, 1, string_pos("&lt;!--", js) - 3);
    }
    else
        show_debug_message("NopeStatus: " + string(async_load[? "status"]));
}
else
    show_debug_message("NopeId: " + string(cardId));
    
if (global.newSelloutStr != global.selloutStr) // we've got new sellout 
{
    global.sellout = true;
    show_debug_message(global.selloutStr + ":" + global.newSelloutStr + ";");
}
else
    global.sellout = false;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Game variables initialising 
draw_texture_flush();
switch (room)
{
case rMainMenu:
    with (oServer)
        instance_destroy();
    with (oClient)
        instance_destroy();
    break;
case rGame:
    global.gameState = GAME_STATES.CARD_PREPARE;
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="3">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>saveGame();
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
