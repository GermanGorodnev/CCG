<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Init
image_speed = 0;

state = CARD_STATES.DONE_ACTION;

canTurn = true;

ind = 0;
player = 0;
borderIndex = 0;

cardPath = path_add();

// choosings
choosen = false; // choosen to give an event

actions = ds_list_create();

resists = ds_list_create();

type = 0; // type in enum CARDS

desc = ""; // Description
actionsCount = 4;
actionsNames[3] = ""; // actual name of action
actionsIndex[3] = 0; // index in ACTIONS enum
actionsMana[3] = 0; // mana needed
actionsNeedTarget[3] = false;
actionsTargetType[3] = -1; // -1 - noone, 0 - ally or enemy, 1 - enemy, 2 - ally
actionsInstant[3] = false;

actionInstant = false;

hp = 1;
_hp = hp;
__hp = _hp;

armor = 0;
_armor = 0;

dmg = 1;
_dmg = 0;

usesMana = true;
mana = 0;
_mana = 10;

atkSpd = 5;


AP = 0;

// Array of events
event[EV.COUNT] = 0;

// Our debuffs
debuffs = ds_list_create();
// Our buffs
buffs = ds_list_create();
// battlecries

// deathrattles
deathrattles = ds_list_create();
 
manaCol = c_white;
_manaCol = manaCol;
manaSc = 1;

armorCol = c_white;
_armorCol = armorCol;
armorSc = 1;

hpCol = c_white;
_hpCol = hpCol;
hpSc = 1;

dmgCol = c_white;
_dmgCol = dmgCol;
dmgSc = 1;

moreCol = c_green;
lessCol = c_red;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
// active or not
hpSc = clamp(hpSc - 0.03, 1, 1.5);
manaSc = clamp(manaSc - 0.03, 1, 1.5);
dmgSc = clamp(dmgSc - 0.03, 1, 1.5);
armorSc = clamp(armorSc - 0.03, 1, 1.5);

switch (player)
{
case 0:
    if (global.AP &lt; AP)
    {
        shader_set(shdDarkenSprite);
    }
    break;
}
draw_self(); // us

// drawing buffs
for (var i = 0, c = ds_list_size(buffs); i &lt; c; i++)
{
    var spr = cardGetBuffIndexByEnum(ds_list_find_value(ds_list_find_value(buffs, i), 0));
    draw_sprite_ext(spr, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha / 2);
}

// drawing debuffs
for (var i = 0, c = ds_list_size(debuffs); i &lt; c; i++)
{
    var spr = cardGetDebuffIndexByEnum(ds_list_find_value(ds_list_find_value(debuffs, i), 0));
    draw_sprite_ext(spr, 0, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha / 2);
}

// choosen to choose an action
if (choosen)
{
    shader_set(shdOutlineSprite);
    var col = shader_get_uniform(shdOutlineSprite, "v_needOutlineCol");
    shader_set_uniform_f(col, 0.0, 0.0, 1.0, 1.0);
}
else if ((global.choosenToPerform == id) || (ds_list_size(actions) &gt; 0 &amp;&amp; (player == 0) &amp;&amp; global.gameState == GAME_STATES.CHOOSE_ACTIONS)) // as green
{
    shader_set(shdOutlineSprite);
    var col = shader_get_uniform(shdOutlineSprite, "v_needOutlineCol");
    shader_set_uniform_f(col, 0.0, 1.0, 0.0, 1.0);
}
else if (global.choosenAsTarget == id) // as red
{
    shader_set(shdOutlineSprite);
    var col = shader_get_uniform(shdOutlineSprite, "v_needOutlineCol");
    shader_set_uniform_f(col, 1.0, 0.0, 0.0, 1.0);    
}

draw_sprite_ext(sCardBorder, borderIndex, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); // border


shader_reset();



// PARAMS
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fParams);

var lenOffX = lengthdir_x(34 * image_xscale, image_angle),
    offY = 57 * image_yscale;
    
// draw hp
drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 120 + image_angle), string(hp), 
    hpCol, c_black, hpSc, hpSc, image_angle, 1);

// draw mana if needed
if (usesMana)
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 60 + image_angle), string(mana), 
    manaCol, c_black, manaSc, manaSc, image_angle, 1);
    //draw_text_transformed_colour(x + lengthdir_x(34, image_angle), y + lengthdir_y(57, 60 + image_angle), string(mana), image_xscale, image_yscale, image_angle, 
       // manaCol, manaCol, manaCol, manaCol, image_alpha);
        
// draw dmg
    drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 240 + image_angle), string(dmg), 
    dmgCol, c_black, dmgSc, dmgSc, image_angle, 1);
//draw_text_transformed_colour(x - lengthdir_x(34, image_angle), y + lengthdir_y(58, 235 + image_angle), string(dmg), image_xscale, image_yscale, image_angle, 
//    dmgCol, dmgCol, dmgCol, dmgCol, image_alpha);

// draw armor
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 300 + image_angle), string(armor), 
    armorCol, c_black, armorSc, armorSc, image_angle, 1);

//draw_text_transformed_colour(x + lengthdir_x(34, image_angle), y + lengthdir_y(57, 300 + image_angle), string(armor), image_xscale, image_yscale, image_angle, 
//    armorCol, armorCol, armorCol, armorCol, image_alpha);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
