<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Just a card to move into deck \ from 
image_speed = 0;
type = 0; // type in enum CARDS
count = 0;
mode = 0;
inDeck = false;
drag = false;
copyCount = 0;
drawCount = false;

ang = 0;

xscN = 1;
yscN = 1;

desc = ""; // Description
actionsCount = 4;
actionsNames[3] = ""; // actual name of action
actionsIndex[3] = 0; // index in ACTIONS enum
actionsMana[3] = 0; // mana needed

borderIndex = 0;

hp = 1;
armor = 0;
dmg = 1;
usesMana = true;
mana = 0;

AP = 0;

white = c_white;
black = c_black;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>actionsNames = 0;
actionsIndex = 0;
actionsMana= 0;
//part_particles_clear(global.packOpenPs);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Some actions
switch (mode) 
{
case 0: // in deck making
    // track the moving
    if (drag)
    {
        if (!mouse_check_button(mb_left) || mouse_check_button_released(mb_left))
        {
            // move from deck or into it
            if (!inDeck)
            {
                if (mouse_y &gt; oCardCollectionContoller.deckLineY)
                {
                    if (oCardCollectionContoller.deckCardsCount &lt; global.maxCards)
                    {
                        if (cardAmountInDeck(type, oCardCollectionContoller.localDeck) &lt; 5)
                        {
                            // add to deck
                            copyCount--;
                            var myp = findCardPosInDeckWithNumbByIndex(type, oCardCollectionContoller.localCol);
                            oCardCollectionContoller.localCol[| myp + 1]--;
                            oCardCollectionContoller.deckCardsCount++;
                            var p = findCardPosInDeckWithNumbByIndex(type, oCardCollectionContoller.localDeck);
                            var t = type;
                            with (oCardCollectionContoller)
                            {
                                if (p != -1)
                                {
                                    localDeck[| (p + 1)] += 1;                            
                                }   
                                else
                                {
                                    ds_list_add(localDeck, t, 1);
                                    dMax = min(dMax + 1, crow * 2, ds_list_size(localDeck) / 2);
                                }  
                                if (localCol[| myp + 1] == 0)
                                    iMax = min(iMax, ds_list_size(localCol) / 2);
                                with (oCardCollectionContoller)
                                {
                                    dmSaveDeck();
                                    dmCreateDeck();
                                    dmCreateCards(); 
                                }
                            }
                        }
                        else
                        {
                            drag = false;
                            depth = 0;
                        }
                    }
                    else
                    {
                        drag = false;
                        depth = 0;
                    }
                }
                else
                {
                    drag = false;
                    depth = 0;
                }
            }
            else
            {
                if (mouse_y &lt; oCardCollectionContoller.deckLineY) 
                {
                    // remove from deck
                    oCardCollectionContoller.deckCardsCount--;
                    copyCount--;
                    var myp = findCardPosInDeckWithNumbByIndex(type, oCardCollectionContoller.localDeck);
                    var p = findCardPosInDeckWithNumbByIndex(type, oCardCollectionContoller.localCol);
                    var t = type;
                    with (oCardCollectionContoller)
                    {
                        localDeck[| myp + 1]--;
                        if (p != -1)
                        {
                            localCol[| (p + 1)] += 1;                            
                        }   
                        else
                        {
                            ds_list_add(localCol, t, 1);
                        }  
                        if (localDeck[| myp + 1] == 0)
                            dMax = min(dMax, crow * 2, ds_list_size(localDeck) / 2);
                        if (p == -1)
                            iMax = min(iMax, crow * 2, ds_list_size(localCol) / 2);
                        with (oCardCollectionContoller)
                        {
                            dmSaveDeck(); 
                            dmCreateDeck();
                            dmCreateCards();
                            dmCreateArrows();
                        }
                    }
                }
                else
                {
                    drag = false;
                    depth = 0;
                }
            }
        }
    }
    else
    {
        if (mouseOnUs())
        {
            if (mouse_check_button_released(mb_left)) // just the info
            {
                // blocking window information
            }
            else if (mouse_check_button(mb_left))
            {
                var d = 0;
                with (oCardDeck)
                {
                    if (drag)
                        d++;
                }
                if (d == 0)
                {
                    drag = true;     
                    depth = -100;           
                }
            }
        }
    }
    break;
case 1: // in pack opening
    var xd = xscN - image_xscale,
        yd = yscN - image_yscale;
    if (xd != 0)
    {
        image_xscale += min(abs(xd), 0.15) * sign(xd);
    }
    if (yd != 0)
    {
        image_yscale += min(abs(yd), 0.15) * sign(yd);
    }
    break;
case 2:
    var xd = xscN - image_xscale,
        yd = yscN - image_yscale;
    if (xd != 0)
    {
        image_xscale += min(abs(xd), 0.15) * sign(xd);
    }
    if (yd != 0)
    {
        image_yscale += min(abs(yd), 0.15) * sign(yd);
    }
    image_alpha -= 0.05;
    if (image_alpha &lt; 0.1)
    {
        //part_type_clear(global.packOpenPs);
        instance_destroy();
    }
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
// MLG ANIM
if (borderIndex &gt; 0)
{
    if (mode == 1 || mode == 2)
    {
        draw_sprite_ext(sRareLeg, borderIndex - 1, x, y, image_xscale, image_yscale, ang, image_blend , 0.7);
        ang += 3;
    }
}
draw_self();

// Border
draw_sprite_ext(sCardBorder, borderIndex, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); // border

// PARAMS
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fParams);

// count
if (drawCount)
    drawTextOutline(x, y, string(copyCount), white, black, image_xscale, image_yscale, 0, image_alpha); 

var lenOffX = lengthdir_x(34 * image_xscale, image_angle),
    offY = 57 * image_yscale;
    
// draw hp
drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 120 + image_angle), string(hp), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);

// draw mana if needed
if (usesMana)
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 60 + image_angle), string(mana), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);
    //draw_text_transformed_colour(x + lengthdir_x(34, image_angle), y + lengthdir_y(57, 60 + image_angle), string(mana), image_xscale, image_yscale, image_angle, 
       // manaCol, manaCol, manaCol, manaCol, image_alpha);
        
// draw dmg
    drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 240 + image_angle), string(dmg), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);
//draw_text_transformed_colour(x - lengthdir_x(34, image_angle), y + lengthdir_y(58, 235 + image_angle), string(dmg), image_xscale, image_yscale, image_angle, 
//    dmgCol, dmgCol, dmgCol, dmgCol, image_alpha);

// draw armor
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 300 + image_angle), string(armor), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);

if (drag)
{
    draw_sprite_ext(sprite_index, image_index, mouse_x, mouse_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha);
    
    // Border
    draw_sprite_ext(sCardBorder, borderIndex, mouse_x, mouse_y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); // border
    
    // PARAMS
    draw_set_halign(fa_center);
    draw_set_valign(fa_middle);
    draw_set_font(fParams);
        
    var lenOffX = lengthdir_x(34 * image_xscale, image_angle),
        offY = 57 * image_yscale;
        
    // draw hp
    drawTextOutline(mouse_x - lenOffX, mouse_y + lengthdir_y(offY, 120 + image_angle), string(hp), 
        c_white, c_black, image_xscale, image_yscale, image_angle, 1);
    
    // draw mana if needed
    if (usesMana)
        drawTextOutline(mouse_x + lenOffX, mouse_y + lengthdir_y(offY, 60 + image_angle), string(mana), 
        c_white, c_black, image_xscale, image_yscale, image_angle, 1);
        //draw_text_transformed_colour(x + lengthdir_x(34, image_angle), y + lengthdir_y(57, 60 + image_angle), string(mana), image_xscale, image_yscale, image_angle, 
           // manaCol, manaCol, manaCol, manaCol, image_alpha);
            
    // draw dmg
        drawTextOutline(mouse_x - lenOffX, mouse_y + lengthdir_y(offY, 240 + image_angle), string(dmg), 
        c_white, c_black, image_xscale, image_yscale, image_angle, 1);
    //draw_text_transformed_colour(x - lengthdir_x(34, image_angle), y + lengthdir_y(58, 235 + image_angle), string(dmg), image_xscale, image_yscale, image_angle, 
    //    dmgCol, dmgCol, dmgCol, dmgCol, image_alpha);
    
    // draw armor
        drawTextOutline(mouse_x + lenOffX, mouse_y + lengthdir_y(offY, 300 + image_angle), string(armor), 
        c_white, c_black, image_xscale, image_yscale, image_angle, 1);
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
