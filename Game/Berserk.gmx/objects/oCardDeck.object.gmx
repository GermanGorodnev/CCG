<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Just a card to move into deck \ from 
image_speed = 0;
type = 0; // type in enum CARDS
mode = 0;

xscN = 1;
yscN = 1;

desc = ""; // Description
actionsCount = 4;
actionsNames[3] = ""; // actual name of action
actionsIndex[3] = 0; // index in ACTIONS enum
actionsMana[3] = 0; // mana needed

borderIndex = 0;

hp = 1;
armor = 0;
dmg = 1;
usesMana = true;
mana = 0;

AP = 0;


</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Some actions
switch (mode) 
{
case 0: // in deck making
    break;
case 1: // in pack opening
    var xd = xscN - image_xscale,
        yd = yscN - image_yscale;
    if (xd != 0)
    {
        image_xscale += min(abs(xd), 0.15) * sign(xd);
    }
    if (yd != 0)
    {
        image_yscale += min(abs(yd), 0.15) * sign(yd);
    }
    break;
case 2:
    var xd = xscN - image_xscale,
        yd = yscN - image_yscale;
    if (xd != 0)
    {
        image_xscale += min(abs(xd), 0.15) * sign(xd);
    }
    if (yd != 0)
    {
        image_yscale += min(abs(yd), 0.15) * sign(yd);
    }
    if (image_xscale &lt; 0.05)
        instance_destroy();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Draw
draw_self();

// Border
draw_sprite_ext(sCardBorder, borderIndex, x, y, image_xscale, image_yscale, image_angle, image_blend, image_alpha); // border

// PARAMS
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
draw_set_font(fParams);

var lenOffX = lengthdir_x(34 * image_xscale, image_angle),
    offY = 57 * image_yscale;
    
// draw hp
drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 120 + image_angle), string(hp), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);

// draw mana if needed
if (usesMana)
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 60 + image_angle), string(mana), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);
    //draw_text_transformed_colour(x + lengthdir_x(34, image_angle), y + lengthdir_y(57, 60 + image_angle), string(mana), image_xscale, image_yscale, image_angle, 
       // manaCol, manaCol, manaCol, manaCol, image_alpha);
        
// draw dmg
    drawTextOutline(x - lenOffX, y + lengthdir_y(offY, 240 + image_angle), string(dmg), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);
//draw_text_transformed_colour(x - lengthdir_x(34, image_angle), y + lengthdir_y(58, 235 + image_angle), string(dmg), image_xscale, image_yscale, image_angle, 
//    dmgCol, dmgCol, dmgCol, dmgCol, image_alpha);

// draw armor
    drawTextOutline(x + lenOffX, y + lengthdir_y(offY, 300 + image_angle), string(armor), 
    c_white, c_black, image_xscale, image_yscale, image_angle, 1);

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
