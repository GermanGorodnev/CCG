<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-2</depth>
  <persistent>0</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Card action chooser
image_speed = 0;
cardId = noone;
cardType = 0;

description = "NOONE";

actionsCount = 4;
actions[0] = ''; 
actions[1] = ''; 
actions[2] = ''; 
actions[3] = ''; 

actionIndex[3] = ACTIONS.PASS_THE_TURN;
actionMana[3] = 0;

xOff = global.guiW / 4;
yOff = 50;

l1x1 = global.guiW / 2;
l1y1 = global.guiH / 2 - 100;
l1y2 = global.guiH / 2 + 100;

l2x1 = global.guiW / 2 - xOff;
l2x2 = global.guiW / 2 + xOff;
l2y1 = global.guiH / 2;
lCol = c_black;

tX = l1x1 - global.guiW / 8;
tY = l2y1 - 50;
tBetwX = global.guiW / 4;
tBetwY = 100;
tW = global.guiW / 4;
tC = c_black;

descX = global.guiW / 4 - 200;
descY = global.guiH / 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Choose control
if (mouse_check_button_released(mb_left))
{
    var actionInd = -1;
    for (var i = 0; i &lt; actionsCount; i++)
    {
        if (actions[i] == "")
            continue;
        var x1, y1, x2, y2;
        x1 = l2x1 + xOff * (i % 2); //tX - tBetwX * (i % 2 == 0) + xOff * (i % 2 == 1);
        y1 = l1y1 + yOff * 2 * (i div 2); //tY + (i div 2) * tBetwY - yOff;
        x2 = x1 + xOff;
        y2 = y1 + yOff * 2;
        if (point_in_rectangle(mouse_x, mouse_y, x1, y1, x2, y2))
        {
            actionInd = i;
        }
    }
    
    if (actionInd == -1)
    {
        with (cardId)
        {
            choosen = false;
        }
        clientSetState(CLIENT_STATES.CHOOSING_CARD);
        instance_destroy();
        exit;
    }
    else
    {
        var p = actionInd;
        // trying to set this action
        with (cardId)
        {
            if (cardTryToSetAction(p) == true) // we actually can
            {
                // check if this action needs a target
                if (actionsNeedTarget[p])
                {
                    cardSetState(CARD_STATES.CHOOSE_TARGET);
                    clientSetState(CLIENT_STATES.CHOOSING_TARGET);
                    global.choosenCard = id;
                    global.choosenCardIndex = p;
                    // sry, need to set a target
                    with (oCardActionChoose)
                    {
                        instance_destroy();
                    }
                    exit;
                }
                else
                {
                    // no need to set a target, just assign
                    cardSetAction(actionsIndex[p], -1, -1);
                    cardSetState(CARD_STATES.ACTION_CHOOSEN);
                    choosen = false;
                    clientSetState(CLIENT_STATES.CHOOSING_CARD);            
                    with (oCardActionChoose)
                    {
                        instance_destroy();
                    }
                    exit;
                }
            }
            else
            {
                choosen = false;
                clientSetState(CLIENT_STATES.CHOOSING_CARD);            
                with (oCardActionChoose)
                {
                    instance_destroy();
                }
                exit;
            }
        }
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing the actions
draw_line_width_colour(l1x1, l1y1, l1x1, l1y2, 4, lCol, lCol);
draw_line_width_colour(l2x1, l2y1, l2x2, l2y1, 4, lCol, lCol);
draw_set_font(fGame);
draw_set_halign(fa_center);
draw_set_valign(fa_middle);
for (var i = 0; i &lt; actionsCount; i++)
{
    if (actions[i] == "")
        continue;
    var x1, y1, x2, y2;
    x1 = l2x1 + xOff * (i % 2); //tX - tBetwX * (i % 2 == 0) + xOff * (i % 2 == 1);
    y1 = l1y1 + yOff * 2 * (i div 2); //tY + (i div 2) * tBetwY - yOff;
    x2 = x1 + xOff;
    y2 = y1 + yOff * 2;
    if (point_in_rectangle(mouse_x, mouse_y, x1, y1, x2, y2))
    {
        draw_rectangle_colour(x1, y1, x2, y2, tC, tC, tC, tC, 1);
    }

    var am = '#' + string(actionMana[i]);
    var c = tC;
    if (cardId.usesMana)
    {
        if (instance_exists(cardId))
                if (cardId.mana &lt; actionMana[i])
                    c = c_red;    
    }
    else
    {
        am = "";
    }

    draw_text_ext_colour(tX + (i % 2) * tBetwX, tY + (i div 2) * tBetwY, actions[i] + am, 20, tW, c, c, c, c, 1);
}   

// Card description
draw_text_ext_colour(descX, descY, description, 20, 200, tC, tC, tC, tC, 1);




</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
