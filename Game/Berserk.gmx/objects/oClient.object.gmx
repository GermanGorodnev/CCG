<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>&lt;undefined&gt;</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>-100</depth>
  <persistent>-1</persistent>
  <parentName>&lt;undefined&gt;</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// Init  
time = 0;

// Buffer for messages
buff = buffer_create(256, buffer_grow, 1);
// TCP\IP socket
client = network_create_socket(global.serverType);
// Remember this socket ID so the server can ignore it
global.client = client;

// List of Phrases in chat
chat = ds_list_create();


// Server connection
var err = network_connect(client, global.connectip, 6510);
if (err != 0)
{
    // We can't :(
    show_debug_message("Cannot connect to server!");
    instance_destroy();
    room_goto(rMainMenu);
    exit;
}

// Client has connected, so send out name to server
sendOnStart();
alarm[0] = 2 * room_speed;


// In-game
//DATABASE
//databasesInit();

global.clientState = CLIENT_STATES.CHOOSING_CARD; // enum CLIENT_STATES
global.choosenCard = noone;
global.choosenCardIndex = 0;

global.choosenToPerform = noone; // draw as green
global.choosenAsTarget = noone; // draw as red
global.attackTypeIndex = -1;
global.attackTypeCol = c_white;
arrW = sprite_get_width(sArrow);

global.cards = ds_list_create();
global.opCards = ds_list_create();

global.AP = 0;
global.beginAP = global.AP;
apbeginx = 1080;
apbeginy = 306;
apbetw = sprite_get_width(sCrystal) + 4;
apinline = 8;

// draw
chatStr = "";
col = c_white;
chatMaxW = 900;
chatMaxH = 348;
chatSep = 20;

n1x = 42;
n1y = 428;
n2y = 300;
nC = c_white;
oC = c_black;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear
ds_list_destroy(chat);
ds_list_destroy(global.cards);
ds_list_destroy(global.opCards);
buffer_delete(buff);
network_destroy(client);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="11">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Perform non-instant events
with (oCardBase)
{
    if (state != CARD_STATES.DESTROY)
    {
        if (!cardGetActionInstant())
            cardSetState(CARD_STATES.PERFORM_ACTION);
    }
    else
        cardDone();
}
alarm[1] = 3 * room_speed;

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="10">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Respond about card creation
clientRespond(SR_GAME_INIT, global.gameState);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="1">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cards done checking
/*if (time == 6) // you ohuel
{
    clientEndPerforming();
    time = 0;
    exit;
}*/
if (global.gameState == GAME_STATES.PERFORM_ACTIONS)
{
    if (clientCheckCardsDone())
    {
        clientEndPerforming();
    }
    else
    {
        time++;
        alarm[1] = 1.5 * room_speed;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="2" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>/// "ping" to thr server we're alive
sendKeepAlive();
alarm[0] = room_speed * 2;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Sending sprites
switch (room)
{
case rLobby:
    break;
case rGame:
    clientInGameUpdate();
    break;
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="68">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Network
var eventid = async_load[? "id"];

if (client == eventid)
{
    var bf = async_load[? "buffer"];
    
    var type = buffer_read(bf, buffer_u16);
    switch (type)
    {
    case SR_NICKNAME:
        global.opName = buffer_read(bf, buffer_string);
        break;
    
    case SR_GAME_INIT:
        if (instance_exists(oServer))
            exit;
        clientGameStart(bf);
        alarm[10] = 1* room_speed;
        break;
        
    case SR_ENEMY_ONLY_HAND:
        if (instance_exists(oServer))
            exit;
        clientSaveEnemyCards(bf);
        break;
    
    case SR_NEXT_TURN:
        if (instance_exists(oServer))
            exit;
        if (global.gameState == GAME_STATES.CHOOSE_ACTIONS)
            exit;
        global.gameState = GAME_STATES.CHOOSE_ACTIONS;
        clientBeginTurn();
        clientRespond(SR_NEXT_TURN, global.gameState);
        break;
    
    case SR_CHANGE_GAME_STATE:
        if (instance_exists(oServer))
            exit;
        var state = buffer_read(bf, buffer_u8);
        global.gameState = state;
        setGameState(state);
        clientRespond(SR_CHANGE_GAME_STATE, state);
        break;
        
    case SR_OTHER_PLAYER_ACTIONS:      
        // server send the card actions information
        if (instance_exists(oServer))
            exit;
        var c = buffer_read(bf, buffer_u8);      
        for (var i = 0; i &lt; c; i++)
        {
            var _x, _y, _type, _actions;
            _x = buffer_read(bf, buffer_s16);
            _y = room_height - buffer_read(bf, buffer_s16);
            _type = buffer_read(bf, buffer_u16);
            var card = instance_position(_x, _y, oCardBase);
            if (card != noone)
            {
                if (card.type == _type)
                {
                    ds_list_clear(card.actions);
                    ds_list_read(card.actions, buffer_read(bf, buffer_string));
                }
            }
        }
        break;  
        
    case SR_TRUE_INF:
        var c = buffer_read(bf, buffer_u8);      
        for (var i = 0; i &lt; c; i++)
        {
            var _x, _y, _type, _actions;
            _x = buffer_read(bf, buffer_s16);
            _y = room_height - buffer_read(bf, buffer_s16);
            _type = buffer_read(bf, buffer_u16);
            var card = instance_position(_x, _y, oCardBase);
            with (card)
            {
                ds_list_clear(card.actions);
                actions = ds_list_read(buffer_read(bf, buffer_string));
                type = _type;
                hp = buffer_read(bf, buffer_u8);
                armor = buffer_read(bf, buffer_u8);
                dmg = buffer_read(bf, buffer_u8);
                actions = ds_list_read(buffer_read(bf, buffer_string));
                resists = ds_list_read(buffer_read(bf, buffer_string));
                debuffs = ds_list_read(buffer_read(bf, buffer_string));
                buffs = ds_list_read(buffer_read(bf, buffer_string));
                impacts = ds_list_read(buffer_read(bf, buffer_string));
            }            
        }        
        break;  
        
    // RARE
    case SR_CHAT_FRASE:   // recieve a chat message
        var s = buffer_read(bf, buffer_string), 
            n = buffer_read(bf, buffer_string);
        addChatFrase(s, n);
        break;
        
    case SR_TO_NEXT_ROOM:
        global.cardsOnBoard = buffer_read(bf, buffer_u8);
        global.cardPlaceType = buffer_read(bf, buffer_string); 
        global.gameState = GAME_STATES.CARD_PLACE;
        room_goto(rGame);
        clientRespond(SR_TO_NEXT_ROOM, GAME_STATES.CARD_PREPARE);
        break;
        
    case SR_PLACE_ENEMY_CARDS_NOW:
        if (instance_exists(oServer))
            exit;
        instance_activate_object(oEndTurn);
        with (oCardPlaceUI)
            instance_destroy();
        clientPlaceEnemyCards();
        clientRespond(SR_PLACE_ENEMY_CARDS_NOW, GAME_STATES.CARD_PLACE);
        break;
    }
}
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="4">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Cleaning
switch (room)
{
case rGame:
    ds_list_clear(chat);
    ds_list_clear(global.cards);
    ds_list_clear(global.opCards);
    //clientGameStart(initBuff);
    break;
}   
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="8" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Drawing the environment sprites
switch (room)
{
case rLobby:
    // Drawing text
    draw_set_halign(fa_left);
    draw_set_valign(fa_top);
    draw_set_font(f0);
    draw_rectangle_colour(32, 100, 932, 448, col, col, col, col, 0);
    draw_rectangle(32, 100, 932, 448, 1);
    draw_text_ext(35, 102, chatStr, chatSep, chatMaxW);
    break;
    
case rGame:  
    // Names
    draw_set_font(fGame);
    draw_set_halign(fa_left);
    drawTextOutline(n1x, n1y, global.name, nC, oC, 1, 1, 0, 1); // our name
    drawTextOutline(n1x, n2y, global.opName, nC, oC, 1, 1, 0, 1); // enemy name    
    
    // Arrow to target
    if (global.choosenToPerform != noone &amp;&amp; !is_undefined(global.choosenToPerform))
    {
        if (global.choosenAsTarget != noone &amp;&amp; !is_undefined(global.choosenAsTarget))
        {
            if (instance_exists(global.choosenToPerform) &amp;&amp; instance_exists(global.choosenAsTarget))
            {
            if (global.choosenToPerform != global.choosenAsTarget)
            {
                var objFrom = global.choosenToPerform,
                    objTo = global.choosenAsTarget;
                var angle = point_direction(objFrom.x, objFrom.y, objTo.x, objTo.y),
                    dist = point_distance(objFrom.x, objFrom.y, objTo.x, objTo.y);
                // first - the arrow end
                draw_sprite_ext(sArrow, 0, objTo.x, objTo.y, 1, 1, angle, global.attackTypeCol, 0.5);
                // now the stretched center
                draw_sprite_ext(sArrow, 1, objTo.x - lengthdir_x(arrW, angle), objTo.y - lengthdir_y(arrW, angle), 
                    (dist - arrW) / arrW - 1, 1, angle, global.attackTypeCol, 0.5);
                // now the end
                draw_sprite_ext(sArrow, 2, objFrom.x + lengthdir_x(arrW, angle), objFrom.y + lengthdir_y(arrW, angle), 
                    1, 1, angle, global.attackTypeCol, 0.5);
                // icon in center
                var xc = objFrom.x + lengthdir_x(dist / 2, angle),
                    yc = objFrom.y + lengthdir_y(dist / 2, angle);
                draw_sprite_ext(sAttackIcons, global.attackTypeIndex, xc, yc, 1, 1, 0, global.attackTypeCol, 1);
            }
            else
            {
                var objFrom = global.choosenToPerform;
                draw_sprite_ext(sAttackIcons, global.attackTypeIndex, objFrom.x, objFrom.y, 1, 1, 0, global.attackTypeCol, 1);            
            }
            }
        }
    };
    
    // Action points
    if (global.gameState != GAME_STATES.CARD_PLACE)
    {
    if (global.beginAP &gt; 0)
    {
    var av = 0;
    for (var i = 0; i &lt; global.beginAP; i++)
    {
        var xp = apbeginx + apbetw * (i mod apinline),
            yp = apbeginy + (i div apinline) * apbetw,
            ind = 0;
        if (av &lt; global.AP)
            ind = 1;
        if (global.gameState == GAME_STATES.CHOOSE_ACTIONS)
            if (global.choosenCard != noone)
                if (global.AP - av == median(1, global.AP - av, global.choosenCard.AP))
                    ind = 2;
        draw_sprite_ext(sCrystal, ind, xp, yp, 1, 1, 0, image_blend, 1);
        av++;
    }
    }
    }
    break;
}

</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
