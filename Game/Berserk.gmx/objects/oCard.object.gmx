<!--This Document is generated by GameMaker, if you edit it by hand then you do so at your own risk!-->
<object>
  <spriteName>sCard</spriteName>
  <solid>0</solid>
  <visible>-1</visible>
  <depth>0</depth>
  <persistent>0</persistent>
  <parentName>oCardBase</parentName>
  <maskName>&lt;undefined&gt;</maskName>
  <events>
    <event eventtype="0" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Just a card
event_inherited();
// VERY COOL CREATION
image_xscale = 5;
image_yscale = image_xscale;
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="1" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Clear
// WARNING
// Add to grave
ds_list_add(oGameLists.died, type);

</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="3" enumb="0">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Updating
switch (state)
{
case CARD_STATES.DESTROY: // we're dying
    image_xscale += 0.1;
    image_yscale = image_xscale;
    image_alpha -= 0.08;
    if (image_alpha &lt;= 0)
    {
        cardDestroy();
        instance_destroy();
    }
    break;
       
default:
image_xscale = max(image_xscale - 0.15, 1);
image_yscale = image_xscale;
if (path_index == -1)
    cardUpdateImpact();

if (global.clientState == CLIENT_STATES.CHOOSING_CARD)
{
    switch (state)
    {
    case CARD_STATES.WAIT_FOR_ACTION: // we don't have an action, just wait
        if (mouse_check_button_released(mb_left) &amp;&amp; mouseOnUs())
        {   
            if (cardCanBeChoosen())
            {
            if (instance_exists(oCardActionChoose))
            {
                with (oCardActionChoose)
                    instance_destroy();
                clientSetState(CLIENT_STATES.CHOOSING_CARD);
            }
            else
            {
                if (ds_list_empty(actions)) // if we haven't choosen an action yet
                {
                    if (player == 0) // it's HIS card
                    {
                        var a = instance_create(0, 0, oCardActionChoose);
                        var cardId = id;
                        with (a)
                            cardActionChooserInit(cardId);    
                        clientSetState(CLIENT_STATES.CHOOSING_ACTION);
                        global.choosenCard = id;
                        choosen = true;                  
                    }
                }
            }
            }
        }
        break;
    case CARD_STATES.CHOOSE_TARGET: // we're the target
        break;
    case CARD_STATES.PERFORM_ACTION: // we're performing an action we've got
        break;
    }
}
else if (global.clientState == CLIENT_STATES.CHOOSING_TARGET)
{
    switch (state)
    {
    case CARD_STATES.DESTROY: // cannot target
        break;
    default:
        if (mouse_check_button_released(mb_left) &amp;&amp; mouseOnUs())
        {
            // we're the target            
            var plNeed = global.choosenCard.actionsTargetType[global.choosenCardIndex];
            switch (plNeed) // ally\enemy\does not matter
            {
            case TARGET_GROUPS.ANY_CARD: // does not matter
                var p = max(ds_list_find_index(global.cards, id), ds_list_find_index(global.opCards, id));                    
                with (global.choosenCard)
                {
                    cardSetAction(global.choosenCard.actionsIndex[global.choosenCardIndex], p, TARGET_GROUPS.ANY_CARD);   
                }             
                break;
            case TARGET_GROUPS.ENEMY_CARDS: // enemy only
                if (player == 1)
                {
                    if (cardCanBeTargeted())
                    {
                        //var p = ds_list_find_index(global.opCards, id);
                        var p = cardPosToIndex(x, y);
                        with (global.choosenCard)
                        {
                            cardSetAction(global.choosenCard.actionsIndex[global.choosenCardIndex], p, TARGET_GROUPS.ENEMY_CARDS);   
                        } 
                    }
                    else
                        exit;            
                }
                else
                    exit;
                break;
            case TARGET_GROUPS.ALLY_CARDS: // ally only
                if (player == 0)
                {
                    //var p = ds_list_find_index(global.cards, id);
                    var p = cardPosToIndex(x, y);
                    with (global.choosenCard)
                    {
                        cardSetAction(global.choosenCard.actionsIndex[global.choosenCardIndex], p, TARGET_GROUPS.ALLY_CARDS);   
                    }             
                }
                else
                    exit;
                break;
            case TARGET_GROUPS.ALLY_MECHS:
                if (player != 0 || class != CLASSES.MECH)
                    exit;
                var p = cardPosToIndex(x, y);
                with (global.choosenCard)
                {
                    cardSetAction(global.choosenCard.actionsIndex[global.choosenCardIndex], p, TARGET_GROUPS.ALLY_CARDS);   
                }  
                break;
            }
            with (global.choosenCard)
            {
                cardSetState(CARD_STATES.ACTION_CHOOSEN);
            }
            clientSetState(CLIENT_STATES.CHOOSING_CARD);
        }            
        break;
    }
}
if (global.gameState &gt; GAME_STATES.ZERO_TURN)
{
    if (mouseOnUs())
    {
        if (player == 0)
        {
            if (state == CARD_STATES.ACTION_CHOOSEN) // we've choosen, so can show the action to player
            {
                global.choosenToPerform = noone; // draw as green
                global.choosenAsTarget = noone; // draw as red
                global.choosenToPerform = id;
                cardGetIconIndexByAttackIndex(actions[| 0]);
                var t = ds_list_find_value(actions, 2);
                if (!is_undefined(t))
                {
                    var gr = gameGetListByTargetGroup(actions[| 3], t);
                    global.choosenAsTarget = cardIndexToPos(t, gr);
                } 
                else
                {
                    global.choosenToPerform = noone; // draw as green
                    global.choosenAsTarget = noone; // draw as red            
                }
            }
        }
    }
    else
    {
        if (global.choosenToPerform == id)
        {
            global.choosenToPerform = noone; // draw as green
            global.choosenAsTarget = noone; // draw as red
        }
    }
}    
if (hp &lt;= 0)
{
    cardSetState(CARD_STATES.DESTROY);
}
break;

}
if (mouse_check_button_released(mb_right))
    if (mouseOnUs())
        windowInitialiseAboutCard(id);
</string>
          </argument>
        </arguments>
      </action>
    </event>
    <event eventtype="7" enumb="8">
      <action>
        <libid>1</libid>
        <id>603</id>
        <kind>7</kind>
        <userelative>0</userelative>
        <isquestion>0</isquestion>
        <useapplyto>-1</useapplyto>
        <exetype>2</exetype>
        <functionname></functionname>
        <codestring></codestring>
        <whoName>self</whoName>
        <relative>0</relative>
        <isnot>0</isnot>
        <arguments>
          <argument>
            <kind>1</kind>
            <string>///Seems like we were affected by jojn
cardDone();
path_clear_points(cardPath);
</string>
          </argument>
        </arguments>
      </action>
    </event>
  </events>
  <PhysicsObject>0</PhysicsObject>
  <PhysicsObjectSensor>0</PhysicsObjectSensor>
  <PhysicsObjectShape>0</PhysicsObjectShape>
  <PhysicsObjectDensity>0.5</PhysicsObjectDensity>
  <PhysicsObjectRestitution>0.100000001490116</PhysicsObjectRestitution>
  <PhysicsObjectGroup>0</PhysicsObjectGroup>
  <PhysicsObjectLinearDamping>0.100000001490116</PhysicsObjectLinearDamping>
  <PhysicsObjectAngularDamping>0.100000001490116</PhysicsObjectAngularDamping>
  <PhysicsObjectFriction>0.200000002980232</PhysicsObjectFriction>
  <PhysicsObjectAwake>-1</PhysicsObjectAwake>
  <PhysicsObjectKinematic>0</PhysicsObjectKinematic>
  <PhysicsShapePoints/>
</object>
